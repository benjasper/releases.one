// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/api.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/benjasper/releases.one/internal/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ApiServiceName is the fully-qualified name of the ApiService service.
	ApiServiceName = "api.v1.ApiService"
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "api.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApiServiceSyncProcedure is the fully-qualified name of the ApiService's Sync RPC.
	ApiServiceSyncProcedure = "/api.v1.ApiService/Sync"
	// ApiServiceGetRepositoriesProcedure is the fully-qualified name of the ApiService's
	// GetRepositories RPC.
	ApiServiceGetRepositoriesProcedure = "/api.v1.ApiService/GetRepositories"
	// ApiServiceToogleUserPublicFeedProcedure is the fully-qualified name of the ApiService's
	// ToogleUserPublicFeed RPC.
	ApiServiceToogleUserPublicFeedProcedure = "/api.v1.ApiService/ToogleUserPublicFeed"
	// ApiServiceGetMyUserProcedure is the fully-qualified name of the ApiService's GetMyUser RPC.
	ApiServiceGetMyUserProcedure = "/api.v1.ApiService/GetMyUser"
	// ApiServiceLogoutProcedure is the fully-qualified name of the ApiService's Logout RPC.
	ApiServiceLogoutProcedure = "/api.v1.ApiService/Logout"
	// ApiServiceToggleUserOnboardedProcedure is the fully-qualified name of the ApiService's
	// ToggleUserOnboarded RPC.
	ApiServiceToggleUserOnboardedProcedure = "/api.v1.ApiService/ToggleUserOnboarded"
	// AuthServiceRefreshTokenProcedure is the fully-qualified name of the AuthService's RefreshToken
	// RPC.
	AuthServiceRefreshTokenProcedure = "/api.v1.AuthService/RefreshToken"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	apiServiceServiceDescriptor                    = v1.File_api_v1_api_proto.Services().ByName("ApiService")
	apiServiceSyncMethodDescriptor                 = apiServiceServiceDescriptor.Methods().ByName("Sync")
	apiServiceGetRepositoriesMethodDescriptor      = apiServiceServiceDescriptor.Methods().ByName("GetRepositories")
	apiServiceToogleUserPublicFeedMethodDescriptor = apiServiceServiceDescriptor.Methods().ByName("ToogleUserPublicFeed")
	apiServiceGetMyUserMethodDescriptor            = apiServiceServiceDescriptor.Methods().ByName("GetMyUser")
	apiServiceLogoutMethodDescriptor               = apiServiceServiceDescriptor.Methods().ByName("Logout")
	apiServiceToggleUserOnboardedMethodDescriptor  = apiServiceServiceDescriptor.Methods().ByName("ToggleUserOnboarded")
	authServiceServiceDescriptor                   = v1.File_api_v1_api_proto.Services().ByName("AuthService")
	authServiceRefreshTokenMethodDescriptor        = authServiceServiceDescriptor.Methods().ByName("RefreshToken")
)

// ApiServiceClient is a client for the api.v1.ApiService service.
type ApiServiceClient interface {
	Sync(context.Context, *connect.Request[v1.SyncRequest]) (*connect.Response[v1.SyncResponse], error)
	GetRepositories(context.Context, *connect.Request[v1.GetRepositoriesRequest]) (*connect.Response[v1.GetRepositoriesResponse], error)
	ToogleUserPublicFeed(context.Context, *connect.Request[v1.ToogleUserPublicFeedRequest]) (*connect.Response[v1.ToogleUserPublicFeedResponse], error)
	GetMyUser(context.Context, *connect.Request[v1.GetMyUserRequest]) (*connect.Response[v1.GetMyUserResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	ToggleUserOnboarded(context.Context, *connect.Request[v1.ToggleUserOnboardedRequest]) (*connect.Response[v1.ToggleUserOnboardedResponse], error)
}

// NewApiServiceClient constructs a client for the api.v1.ApiService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &apiServiceClient{
		sync: connect.NewClient[v1.SyncRequest, v1.SyncResponse](
			httpClient,
			baseURL+ApiServiceSyncProcedure,
			connect.WithSchema(apiServiceSyncMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRepositories: connect.NewClient[v1.GetRepositoriesRequest, v1.GetRepositoriesResponse](
			httpClient,
			baseURL+ApiServiceGetRepositoriesProcedure,
			connect.WithSchema(apiServiceGetRepositoriesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		toogleUserPublicFeed: connect.NewClient[v1.ToogleUserPublicFeedRequest, v1.ToogleUserPublicFeedResponse](
			httpClient,
			baseURL+ApiServiceToogleUserPublicFeedProcedure,
			connect.WithSchema(apiServiceToogleUserPublicFeedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMyUser: connect.NewClient[v1.GetMyUserRequest, v1.GetMyUserResponse](
			httpClient,
			baseURL+ApiServiceGetMyUserProcedure,
			connect.WithSchema(apiServiceGetMyUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+ApiServiceLogoutProcedure,
			connect.WithSchema(apiServiceLogoutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		toggleUserOnboarded: connect.NewClient[v1.ToggleUserOnboardedRequest, v1.ToggleUserOnboardedResponse](
			httpClient,
			baseURL+ApiServiceToggleUserOnboardedProcedure,
			connect.WithSchema(apiServiceToggleUserOnboardedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// apiServiceClient implements ApiServiceClient.
type apiServiceClient struct {
	sync                 *connect.Client[v1.SyncRequest, v1.SyncResponse]
	getRepositories      *connect.Client[v1.GetRepositoriesRequest, v1.GetRepositoriesResponse]
	toogleUserPublicFeed *connect.Client[v1.ToogleUserPublicFeedRequest, v1.ToogleUserPublicFeedResponse]
	getMyUser            *connect.Client[v1.GetMyUserRequest, v1.GetMyUserResponse]
	logout               *connect.Client[v1.LogoutRequest, v1.LogoutResponse]
	toggleUserOnboarded  *connect.Client[v1.ToggleUserOnboardedRequest, v1.ToggleUserOnboardedResponse]
}

// Sync calls api.v1.ApiService.Sync.
func (c *apiServiceClient) Sync(ctx context.Context, req *connect.Request[v1.SyncRequest]) (*connect.Response[v1.SyncResponse], error) {
	return c.sync.CallUnary(ctx, req)
}

// GetRepositories calls api.v1.ApiService.GetRepositories.
func (c *apiServiceClient) GetRepositories(ctx context.Context, req *connect.Request[v1.GetRepositoriesRequest]) (*connect.Response[v1.GetRepositoriesResponse], error) {
	return c.getRepositories.CallUnary(ctx, req)
}

// ToogleUserPublicFeed calls api.v1.ApiService.ToogleUserPublicFeed.
func (c *apiServiceClient) ToogleUserPublicFeed(ctx context.Context, req *connect.Request[v1.ToogleUserPublicFeedRequest]) (*connect.Response[v1.ToogleUserPublicFeedResponse], error) {
	return c.toogleUserPublicFeed.CallUnary(ctx, req)
}

// GetMyUser calls api.v1.ApiService.GetMyUser.
func (c *apiServiceClient) GetMyUser(ctx context.Context, req *connect.Request[v1.GetMyUserRequest]) (*connect.Response[v1.GetMyUserResponse], error) {
	return c.getMyUser.CallUnary(ctx, req)
}

// Logout calls api.v1.ApiService.Logout.
func (c *apiServiceClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// ToggleUserOnboarded calls api.v1.ApiService.ToggleUserOnboarded.
func (c *apiServiceClient) ToggleUserOnboarded(ctx context.Context, req *connect.Request[v1.ToggleUserOnboardedRequest]) (*connect.Response[v1.ToggleUserOnboardedResponse], error) {
	return c.toggleUserOnboarded.CallUnary(ctx, req)
}

// ApiServiceHandler is an implementation of the api.v1.ApiService service.
type ApiServiceHandler interface {
	Sync(context.Context, *connect.Request[v1.SyncRequest]) (*connect.Response[v1.SyncResponse], error)
	GetRepositories(context.Context, *connect.Request[v1.GetRepositoriesRequest]) (*connect.Response[v1.GetRepositoriesResponse], error)
	ToogleUserPublicFeed(context.Context, *connect.Request[v1.ToogleUserPublicFeedRequest]) (*connect.Response[v1.ToogleUserPublicFeedResponse], error)
	GetMyUser(context.Context, *connect.Request[v1.GetMyUserRequest]) (*connect.Response[v1.GetMyUserResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	ToggleUserOnboarded(context.Context, *connect.Request[v1.ToggleUserOnboardedRequest]) (*connect.Response[v1.ToggleUserOnboardedResponse], error)
}

// NewApiServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApiServiceHandler(svc ApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	apiServiceSyncHandler := connect.NewUnaryHandler(
		ApiServiceSyncProcedure,
		svc.Sync,
		connect.WithSchema(apiServiceSyncMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetRepositoriesHandler := connect.NewUnaryHandler(
		ApiServiceGetRepositoriesProcedure,
		svc.GetRepositories,
		connect.WithSchema(apiServiceGetRepositoriesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceToogleUserPublicFeedHandler := connect.NewUnaryHandler(
		ApiServiceToogleUserPublicFeedProcedure,
		svc.ToogleUserPublicFeed,
		connect.WithSchema(apiServiceToogleUserPublicFeedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetMyUserHandler := connect.NewUnaryHandler(
		ApiServiceGetMyUserProcedure,
		svc.GetMyUser,
		connect.WithSchema(apiServiceGetMyUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceLogoutHandler := connect.NewUnaryHandler(
		ApiServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(apiServiceLogoutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceToggleUserOnboardedHandler := connect.NewUnaryHandler(
		ApiServiceToggleUserOnboardedProcedure,
		svc.ToggleUserOnboarded,
		connect.WithSchema(apiServiceToggleUserOnboardedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.ApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApiServiceSyncProcedure:
			apiServiceSyncHandler.ServeHTTP(w, r)
		case ApiServiceGetRepositoriesProcedure:
			apiServiceGetRepositoriesHandler.ServeHTTP(w, r)
		case ApiServiceToogleUserPublicFeedProcedure:
			apiServiceToogleUserPublicFeedHandler.ServeHTTP(w, r)
		case ApiServiceGetMyUserProcedure:
			apiServiceGetMyUserHandler.ServeHTTP(w, r)
		case ApiServiceLogoutProcedure:
			apiServiceLogoutHandler.ServeHTTP(w, r)
		case ApiServiceToggleUserOnboardedProcedure:
			apiServiceToggleUserOnboardedHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApiServiceHandler struct{}

func (UnimplementedApiServiceHandler) Sync(context.Context, *connect.Request[v1.SyncRequest]) (*connect.Response[v1.SyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ApiService.Sync is not implemented"))
}

func (UnimplementedApiServiceHandler) GetRepositories(context.Context, *connect.Request[v1.GetRepositoriesRequest]) (*connect.Response[v1.GetRepositoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ApiService.GetRepositories is not implemented"))
}

func (UnimplementedApiServiceHandler) ToogleUserPublicFeed(context.Context, *connect.Request[v1.ToogleUserPublicFeedRequest]) (*connect.Response[v1.ToogleUserPublicFeedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ApiService.ToogleUserPublicFeed is not implemented"))
}

func (UnimplementedApiServiceHandler) GetMyUser(context.Context, *connect.Request[v1.GetMyUserRequest]) (*connect.Response[v1.GetMyUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ApiService.GetMyUser is not implemented"))
}

func (UnimplementedApiServiceHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ApiService.Logout is not implemented"))
}

func (UnimplementedApiServiceHandler) ToggleUserOnboarded(context.Context, *connect.Request[v1.ToggleUserOnboardedRequest]) (*connect.Response[v1.ToggleUserOnboardedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ApiService.ToggleUserOnboarded is not implemented"))
}

// AuthServiceClient is a client for the api.v1.AuthService service.
type AuthServiceClient interface {
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
}

// NewAuthServiceClient constructs a client for the api.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+AuthServiceRefreshTokenProcedure,
			connect.WithSchema(authServiceRefreshTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	refreshToken *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
}

// RefreshToken calls api.v1.AuthService.RefreshToken.
func (c *authServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the api.v1.AuthService service.
type AuthServiceHandler interface {
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceRefreshTokenHandler := connect.NewUnaryHandler(
		AuthServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(authServiceRefreshTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceRefreshTokenProcedure:
			authServiceRefreshTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.AuthService.RefreshToken is not implemented"))
}
